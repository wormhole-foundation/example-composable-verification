/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  WormholeSender,
  WormholeSenderInterface,
} from "../WormholeSender";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_wormhole",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "encodedMessage",
        type: "bytes",
      },
    ],
    name: "decodeMessage",
    outputs: [
      {
        components: [
          {
            internalType: "uint8",
            name: "payloadID",
            type: "uint8",
          },
          {
            internalType: "string",
            name: "message",
            type: "string",
          },
        ],
        internalType: "struct Messages.UpdateMessage",
        name: "parsedMessage",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint8",
            name: "payloadID",
            type: "uint8",
          },
          {
            internalType: "string",
            name: "message",
            type: "string",
          },
        ],
        internalType: "struct Messages.UpdateMessage",
        name: "parsedMessage",
        type: "tuple",
      },
    ],
    name: "encodeMessage",
    outputs: [
      {
        internalType: "bytes",
        name: "encodedMessage",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "message",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_message",
        type: "string",
      },
    ],
    name: "sendMessage",
    outputs: [
      {
        internalType: "uint64",
        name: "messageSequence",
        type: "uint64",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "wormhole",
    outputs: [
      {
        internalType: "contract IWormhole",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b50604051610b80380380610b8083398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b608051610aef6100916000396000818160bf01526101ef0152610aef6000f3fe60806040526004361061004a5760003560e01c8063469c81101461004f578063634d45b21461008057806384acd1bb146100ad578063c0d4a135146100f9578063e21f37ce14610126575b600080fd5b61006261005d3660046106e8565b61013b565b60405167ffffffffffffffff90911681526020015b60405180910390f35b34801561008c57600080fd5b506100a061009b36600461071d565b610277565b60405161007791906107b6565b3480156100b957600080fd5b506100e17f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610077565b34801561010557600080fd5b506101196101143660046107de565b610380565b604051610077919061087a565b34801561013257600080fd5b506101196103db565b600061ffff801682604051602001610153919061088d565b60405160208183030381529060405251106101a95760405162461bcd60e51b81526020600482015260116024820152706d65737361676520746f6f206c6172676560781b60448201526064015b60405180910390fd5b60408051808201909152600181526020810183905260006101c982610380565b905060006101d78582610932565b506040516358cd21bf60e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063b19a437e90349061022c90600090869060c8906004016109f2565b60206040518083038185885af115801561024a573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061026f9190610a24565b949350505050565b60408051808201909152600081526060602082015260006102988382610469565b60ff168083526001146102e15760405162461bcd60e51b81526020600482015260116024820152701a5b9d985b1a59081c185e5b1bd8591251607a1b60448201526064016101a0565b6102ec600182610a4e565b905060006102fa84836104cb565b61ffff16905061030b600283610a4e565b9150600061031a858484610528565b60208501819052905061032d8284610a4e565b9250845183146103785760405162461bcd60e51b81526020600482015260166024820152750d2dcecc2d8d2c840dacae6e6c2ceca40d8cadccee8d60531b60448201526064016101a0565b505050919050565b606060008260200151604051602001610399919061088d565b604051602081830303815290604052905082600001518151826040516020016103c493929190610a6f565b604051602081830303815290604052915050919050565b600080546103e8906108a9565b80601f0160208091040260200160405190810160405280929190818152602001828054610414906108a9565b80156104615780601f1061043657610100808354040283529160200191610461565b820191906000526020600020905b81548152906001019060200180831161044457829003601f168201915b505050505081565b6000610476826001610a4e565b835110156104bc5760405162461bcd60e51b8152602060048201526013602482015272746f55696e74385f6f75744f66426f756e647360681b60448201526064016101a0565b50818101600101515b92915050565b60006104d8826002610a4e565b8351101561051f5760405162461bcd60e51b8152602060048201526014602482015273746f55696e7431365f6f75744f66426f756e647360601b60448201526064016101a0565b50016002015190565b60608161053681601f610a4e565b10156105755760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b60448201526064016101a0565b61057f8284610a4e565b845110156105c35760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b60448201526064016101a0565b6060821580156105e2576040519150600082526020820160405261062c565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101561061b578051835260209283019201610603565b5050858452601f01601f1916604052505b50949350505050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff8084111561066657610666610635565b604051601f8501601f19908116603f0116810190828211818310171561068e5761068e610635565b816040528093508581528686860111156106a757600080fd5b858560208301376000602087830101525050509392505050565b600082601f8301126106d257600080fd5b6106e18383356020850161064b565b9392505050565b6000602082840312156106fa57600080fd5b813567ffffffffffffffff81111561071157600080fd5b61026f848285016106c1565b60006020828403121561072f57600080fd5b813567ffffffffffffffff81111561074657600080fd5b8201601f8101841361075757600080fd5b61026f8482356020840161064b565b60005b83811015610781578181015183820152602001610769565b50506000910152565b600081518084526107a2816020860160208601610766565b601f01601f19169290920160200192915050565b6020815260ff82511660208201526000602083015160408084015261026f606084018261078a565b6000602082840312156107f057600080fd5b813567ffffffffffffffff8082111561080857600080fd5b908301906040828603121561081c57600080fd5b60405160408101818110838211171561083757610837610635565b604052823560ff8116811461084b57600080fd5b815260208301358281111561085f57600080fd5b61086b878286016106c1565b60208301525095945050505050565b6020815260006106e1602083018461078a565b6000825161089f818460208701610766565b9190910192915050565b600181811c908216806108bd57607f821691505b6020821081036108dd57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561092d57600081815260208120601f850160051c8101602086101561090a5750805b601f850160051c820191505b8181101561092957828155600101610916565b5050505b505050565b815167ffffffffffffffff81111561094c5761094c610635565b6109608161095a84546108a9565b846108e3565b602080601f831160018114610995576000841561097d5750858301515b600019600386901b1c1916600185901b178555610929565b600085815260208120601f198616915b828110156109c4578886015182559484019460019091019084016109a5565b50858210156109e25787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b63ffffffff84168152606060208201526000610a11606083018561078a565b905060ff83166040830152949350505050565b600060208284031215610a3657600080fd5b815167ffffffffffffffff811681146106e157600080fd5b808201808211156104c557634e487b7160e01b600052601160045260246000fd5b60f884901b6001600160f81b031916815260f083901b6001600160f01b03191660018201528151600090610aaa816003850160208701610766565b9190910160030194935050505056fea2646970667358221220d45d6ff9a8263e67ef7658febe97090a0b3a5c5d713c5374ab210fad0982132664736f6c63430008120033";

type WormholeSenderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: WormholeSenderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class WormholeSender__factory extends ContractFactory {
  constructor(...args: WormholeSenderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _wormhole: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<WormholeSender> {
    return super.deploy(_wormhole, overrides || {}) as Promise<WormholeSender>;
  }
  override getDeployTransaction(
    _wormhole: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_wormhole, overrides || {});
  }
  override attach(address: string): WormholeSender {
    return super.attach(address) as WormholeSender;
  }
  override connect(signer: Signer): WormholeSender__factory {
    return super.connect(signer) as WormholeSender__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WormholeSenderInterface {
    return new utils.Interface(_abi) as WormholeSenderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): WormholeSender {
    return new Contract(address, _abi, signerOrProvider) as WormholeSender;
  }
}
