/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  WormholeAndNativeSender,
  WormholeAndNativeSenderInterface,
} from "../WormholeAndNativeSender";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_wormhole",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "crossDomainMessengerAddr",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "encodedMessage",
        type: "bytes",
      },
    ],
    name: "decodeMessage",
    outputs: [
      {
        components: [
          {
            internalType: "uint8",
            name: "payloadID",
            type: "uint8",
          },
          {
            internalType: "string",
            name: "message",
            type: "string",
          },
        ],
        internalType: "struct Messages.UpdateMessage",
        name: "parsedMessage",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint8",
            name: "payloadID",
            type: "uint8",
          },
          {
            internalType: "string",
            name: "message",
            type: "string",
          },
        ],
        internalType: "struct Messages.UpdateMessage",
        name: "parsedMessage",
        type: "tuple",
      },
    ],
    name: "encodeMessage",
    outputs: [
      {
        internalType: "bytes",
        name: "encodedMessage",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "message",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_receiverL2Addr",
        type: "address",
      },
    ],
    name: "nativeBridgeSetup",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "receiverL2Addr",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_message",
        type: "string",
      },
    ],
    name: "sendMessage",
    outputs: [
      {
        internalType: "uint64",
        name: "messageSequence",
        type: "uint64",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "wormhole",
    outputs: [
      {
        internalType: "contract IWormhole",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a0604052600080546001600160a01b031916735086d1eef304eb5284a0f6720f79403b4e9be29417905534801561003657600080fd5b50604051610e77380380610e7783398101604081905261005591610066565b6001600160a01b0316608052610096565b60006020828403121561007857600080fd5b81516001600160a01b038116811461008f57600080fd5b9392505050565b608051610dc06100b76000396000818160f001526102cd0152610dc06000f3fe60806040526004361061007b5760003560e01c80639bd87f6f1161004e5780639bd87f6f1461014a578063a6ba577e1461016a578063c0d4a1351461018c578063e21f37ce146101b957600080fd5b8063469c811014610080578063634d45b2146100b157806384acd1bb146100de57806387edb8a21461012a575b600080fd5b61009361008e36600461094e565b6101ce565b60405167ffffffffffffffff90911681526020015b60405180910390f35b3480156100bd57600080fd5b506100d16100cc36600461098b565b610409565b6040516100a89190610a24565b3480156100ea57600080fd5b506101127f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100a8565b34801561013657600080fd5b50600054610112906001600160a01b031681565b34801561015657600080fd5b50600154610112906001600160a01b031681565b34801561017657600080fd5b5061018a610185366004610a4c565b610512565b005b34801561019857600080fd5b506101ac6101a7366004610a75565b6105e6565b6040516100a89190610b11565b3480156101c557600080fd5b506101ac610641565b6001546000906001600160a01b03166102215760405162461bcd60e51b815260206004820152601060248201526f1c9958d95a5d995c881b9bdd081cd95d60821b60448201526064015b60405180910390fd5b60405161ffff90610236908490602001610b24565b60405160208183030381529060405251106102875760405162461bcd60e51b81526020600482015260116024820152706d65737361676520746f6f206c6172676560781b6044820152606401610218565b60408051808201909152600181526020810183905260006102a7826105e6565b905060026102b58582610bc9565b506040516358cd21bf60e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063b19a437e90349061030a90600090869060c890600401610c89565b60206040518083038185885af1158015610328573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061034d9190610cbb565b815160208301206000546001546040516024810184905293965091926001600160a01b0391821692633dbb202b92169060440160408051601f198184030181529181526020820180516001600160e01b0316634ef82d6960e01b1790525160e084901b6001600160e01b03191681526103cf929190620f424090600401610ce5565b600060405180830381600087803b1580156103e957600080fd5b505af11580156103fd573d6000803e3d6000fd5b50505050505050919050565b604080518082019091526000815260606020820152600061042a83826106cf565b60ff168083526001146104735760405162461bcd60e51b81526020600482015260116024820152701a5b9d985b1a59081c185e5b1bd8591251607a1b6044820152606401610218565b61047e600182610d1f565b9050600061048c8483610731565b61ffff16905061049d600283610d1f565b915060006104ac85848461078e565b6020850181905290506104bf8284610d1f565b92508451831461050a5760405162461bcd60e51b81526020600482015260166024820152750d2dcecc2d8d2c840dacae6e6c2ceca40d8cadccee8d60531b6044820152606401610218565b505050919050565b6001546001600160a01b0316156105625760405162461bcd60e51b81526020600482015260146024820152731c9958d95a5d995c88185b1c9958591e481cd95d60621b6044820152606401610218565b6001600160a01b0381166105c45760405162461bcd60e51b815260206004820152602360248201527f72656365697665722063616e6e6f7420626520746865207a65726f206164647260448201526265737360e81b6064820152608401610218565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6060600082602001516040516020016105ff9190610b24565b6040516020818303038152906040529050826000015181518260405160200161062a93929190610d40565b604051602081830303815290604052915050919050565b6002805461064e90610b40565b80601f016020809104026020016040519081016040528092919081815260200182805461067a90610b40565b80156106c75780601f1061069c576101008083540402835291602001916106c7565b820191906000526020600020905b8154815290600101906020018083116106aa57829003601f168201915b505050505081565b60006106dc826001610d1f565b835110156107225760405162461bcd60e51b8152602060048201526013602482015272746f55696e74385f6f75744f66426f756e647360681b6044820152606401610218565b50818101600101515b92915050565b600061073e826002610d1f565b835110156107855760405162461bcd60e51b8152602060048201526014602482015273746f55696e7431365f6f75744f66426f756e647360601b6044820152606401610218565b50016002015190565b60608161079c81601f610d1f565b10156107db5760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b6044820152606401610218565b6107e58284610d1f565b845110156108295760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b6044820152606401610218565b6060821580156108485760405191506000825260208201604052610892565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015610881578051835260209283019201610869565b5050858452601f01601f1916604052505b50949350505050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff808411156108cc576108cc61089b565b604051601f8501601f19908116603f011681019082821181831017156108f4576108f461089b565b8160405280935085815286868601111561090d57600080fd5b858560208301376000602087830101525050509392505050565b600082601f83011261093857600080fd5b610947838335602085016108b1565b9392505050565b60006020828403121561096057600080fd5b813567ffffffffffffffff81111561097757600080fd5b61098384828501610927565b949350505050565b60006020828403121561099d57600080fd5b813567ffffffffffffffff8111156109b457600080fd5b8201601f810184136109c557600080fd5b610983848235602084016108b1565b60005b838110156109ef5781810151838201526020016109d7565b50506000910152565b60008151808452610a108160208601602086016109d4565b601f01601f19169290920160200192915050565b6020815260ff82511660208201526000602083015160408084015261098360608401826109f8565b600060208284031215610a5e57600080fd5b81356001600160a01b038116811461094757600080fd5b600060208284031215610a8757600080fd5b813567ffffffffffffffff80821115610a9f57600080fd5b9083019060408286031215610ab357600080fd5b604051604081018181108382111715610ace57610ace61089b565b604052823560ff81168114610ae257600080fd5b8152602083013582811115610af657600080fd5b610b0287828601610927565b60208301525095945050505050565b60208152600061094760208301846109f8565b60008251610b368184602087016109d4565b9190910192915050565b600181811c90821680610b5457607f821691505b602082108103610b7457634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610bc457600081815260208120601f850160051c81016020861015610ba15750805b601f850160051c820191505b81811015610bc057828155600101610bad565b5050505b505050565b815167ffffffffffffffff811115610be357610be361089b565b610bf781610bf18454610b40565b84610b7a565b602080601f831160018114610c2c5760008415610c145750858301515b600019600386901b1c1916600185901b178555610bc0565b600085815260208120601f198616915b82811015610c5b57888601518255948401946001909101908401610c3c565b5085821015610c795787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b63ffffffff84168152606060208201526000610ca860608301856109f8565b905060ff83166040830152949350505050565b600060208284031215610ccd57600080fd5b815167ffffffffffffffff8116811461094757600080fd5b6001600160a01b0384168152606060208201819052600090610d09908301856109f8565b905063ffffffff83166040830152949350505050565b8082018082111561072b57634e487b7160e01b600052601160045260246000fd5b60f884901b6001600160f81b031916815260f083901b6001600160f01b03191660018201528151600090610d7b8160038501602087016109d4565b9190910160030194935050505056fea2646970667358221220dc5a9d00f453294cc8824e27b4f21affdd8b444c0b52d1c5399a81584484e8f764736f6c63430008120033";

type WormholeAndNativeSenderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: WormholeAndNativeSenderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class WormholeAndNativeSender__factory extends ContractFactory {
  constructor(...args: WormholeAndNativeSenderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _wormhole: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<WormholeAndNativeSender> {
    return super.deploy(
      _wormhole,
      overrides || {}
    ) as Promise<WormholeAndNativeSender>;
  }
  override getDeployTransaction(
    _wormhole: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_wormhole, overrides || {});
  }
  override attach(address: string): WormholeAndNativeSender {
    return super.attach(address) as WormholeAndNativeSender;
  }
  override connect(signer: Signer): WormholeAndNativeSender__factory {
    return super.connect(signer) as WormholeAndNativeSender__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WormholeAndNativeSenderInterface {
    return new utils.Interface(_abi) as WormholeAndNativeSenderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): WormholeAndNativeSender {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as WormholeAndNativeSender;
  }
}
