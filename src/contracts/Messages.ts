/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace Messages {
  export type UpdateMessageStruct = {
    payloadID: PromiseOrValue<BigNumberish>;
    message: PromiseOrValue<string>;
  };

  export type UpdateMessageStructOutput = [number, string] & {
    payloadID: number;
    message: string;
  };
}

export interface MessagesInterface extends utils.Interface {
  functions: {
    "decodeMessage(bytes)": FunctionFragment;
    "encodeMessage((uint8,string))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "decodeMessage" | "encodeMessage"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "decodeMessage",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeMessage",
    values: [Messages.UpdateMessageStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "decodeMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeMessage",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Messages extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MessagesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    decodeMessage(
      encodedMessage: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [Messages.UpdateMessageStructOutput] & {
        parsedMessage: Messages.UpdateMessageStructOutput;
      }
    >;

    encodeMessage(
      parsedMessage: Messages.UpdateMessageStruct,
      overrides?: CallOverrides
    ): Promise<[string] & { encodedMessage: string }>;
  };

  decodeMessage(
    encodedMessage: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<Messages.UpdateMessageStructOutput>;

  encodeMessage(
    parsedMessage: Messages.UpdateMessageStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    decodeMessage(
      encodedMessage: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<Messages.UpdateMessageStructOutput>;

    encodeMessage(
      parsedMessage: Messages.UpdateMessageStruct,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    decodeMessage(
      encodedMessage: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    encodeMessage(
      parsedMessage: Messages.UpdateMessageStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    decodeMessage(
      encodedMessage: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    encodeMessage(
      parsedMessage: Messages.UpdateMessageStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
